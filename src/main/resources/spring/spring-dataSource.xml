<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/security 
		http://www.springframework.org/schema/security/spring-security-4.0.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	<!-- 注解 去除事物的扫描 -->
	<context:component-scan base-package="com.jf">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 配置dbcp数据源 -->
	<!-- 数据库连接池Druid配置 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="driverClassName" value="${db.driverClassName}" />
		<property name="url" value="${db.url}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="maxActive" value="${db.maxActive}" />
		<property name="initialSize" value="${db.initialSize}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${db.maxWait}" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000"></property>

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000"></property>

		<property name="validationQuery" value="select 1 from dual" />
		<property name="testOnBorrow" value="true" />
		<property name="testWhileIdle" value="true"></property>
		<property name="testOnReturn" value="false"></property>

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true"></property>
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20"></property>

		<!-- 强制关闭不使用的连接 -->
		<property name="removeAbandoned" value="${db.removeAbandoned}" />
		<property name="removeAbandonedTimeout" value="${db.removeAbandonedTimeout}" />
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat"></property>

		<property name="proxyFilters">
			<list>
				<ref bean="wall-filter" />
			</list>
		</property>
	</bean>

	<bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
		<!-- 对被认为是攻击的SQL进行LOG.error输出 ，暂时设置为false -->
		<property name="logViolation" value="false" />
		<!-- 对被认为是攻击的SQL抛出SQLExcepton 为不影响业务功能的继续执行，暂时设置为false，但是仍然可以在监控页面监控到信息 -->
		<property name="throwException" value="false" />
	</bean>

	<!--配置druid监控spring begin -->
	<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"></bean>
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
		<property name="patterns">
			<list>
				<value>com.jf..service.*</value>
			</list>
		</property>
	</bean>
	<aop:config>
		<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
	</aop:config>
	<!--配置druid监控spring end -->

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations">
			<array>
				<value>classpath:com/jf/**/dao/mapper/*.xml</value>
				<value>classpath:com/jf/**/**/dao/mapper/*.xml</value>
			</array>
		</property>
		<property name="configLocation" value="classpath:mybatis/mybatis-sqlMapConfig.xml" />
		<!-- <property name="typeAliasesPackage" value="com.jf.model" /> -->
	</bean>

	<!-- 扫描DAO层接口，生成代理实现类 -->
	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jf" />
		<property name="markerInterface" value="com.jf.core.dao.BaseMapper" />
		<property name="properties">
			<value>
				mappers = com.jf.core.dao.BaseMapper
				ORDER = BEFORE
			</value>
		</property>
	</bean>

	<!-- 使用JDBC事务 -->
	<aop:aspectj-autoproxy />

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- AOP配置事务 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="select*" read-only="true" propagation="REQUIRED" />
			<tx:method name="query*" read-only="true" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Throwable" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Throwable" />
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Throwable" />
			<tx:method name="*" propagation="REQUIRED" rollback-for="Throwable" />
		</tx:attributes>
	</tx:advice>

	<!-- 配置AOP切面 -->
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* com.jf..service..*Service*.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
	</aop:config>

	<!-- 使用annotation注解方式配置事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

</beans>